// Hook para gerenciar inscri√ß√µes em esportes

import { useState, useEffect, useCallback } from 'react';
import { inscricoesService, type Inscricao } from '../services/api';
import { useAuth } from '../context/AuthContext';

export const useInscricoes = () => {
  const [minhasInscricoes, setMinhasInscricoes] = useState<Inscricao[]>([]);
  const [inscricoesPendentes, setInscricoesPendentes] = useState<Inscricao[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user, isAuthenticated } = useAuth();  // Carregar minhas inscri√ß√µes
  const carregarMinhasInscricoes = useCallback(async () => {
    // Verifica√ß√£o mais robusta - s√≥ carrega se realmente est√° autenticado E tem usu√°rio
    if (!isAuthenticated || !user?.id) {
      console.log('üö´ useInscricoes: Usu√°rio n√£o autenticado, n√£o carregando inscri√ß√µes');
      return;
    }
    
    try {
      console.log('üì° useInscricoes: Carregando inscri√ß√µes para', user.nome);
      setIsLoading(true);
      setError(null);
      const data = await inscricoesService.minhasInscricoes();
      setMinhasInscricoes(data);
      console.log('‚úÖ useInscricoes: Inscri√ß√µes carregadas:', data.length);
    } catch (err) {
      console.error('‚ùå useInscricoes: Erro ao carregar inscri√ß√µes:', err);
      setError(err instanceof Error ? err.message : 'Erro ao carregar inscri√ß√µes');
    } finally {
      setIsLoading(false);
    }
  }, [isAuthenticated, user?.id, user?.nome]);// Carregar inscri√ß√µes pendentes (admin)
  const carregarInscricoesPendentes = async (esporteId: string | number) => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await inscricoesService.listarInscricoes({ 
        status: 'pendente', 
        esporteId: esporteId.toString() 
      });
      setInscricoesPendentes(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao carregar inscri√ß√µes pendentes');
    } finally {
      setIsLoading(false);
    }
  };  // Criar inscri√ß√£o
  const criarInscricao = async (esporteId: string | number) => {
    if (!isAuthenticated || !user?.id) {
      throw new Error('Voc√™ precisa estar logado para se inscrever em um esporte');
    }
    
    try {
      console.log('üìù Criando inscri√ß√£o para o esporte:', esporteId, 'usu√°rio:', user.nome);
      setIsLoading(true);
      setError(null);
      const response = await inscricoesService.inscreverEsporte(esporteId.toString());
      
      // Recarregar minhas inscri√ß√µes
      await carregarMinhasInscricoes();
      
      console.log('‚úÖ Inscri√ß√£o criada com sucesso');
      return response;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao criar inscri√ß√£o';
      console.error('‚ùå Erro ao criar inscri√ß√£o:', errorMessage);
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };// Atualizar status da inscri√ß√£o (admin)
  const atualizarStatusInscricao = async (id: string | number, status: 'aceito' | 'rejeitado') => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await inscricoesService.atualizarStatus(id.toString(), status);
      
      // Recarregar inscri√ß√µes pendentes se houver
      if (inscricoesPendentes.length > 0) {
        const inscricao = inscricoesPendentes.find(i => i.id === id.toString());
        if (inscricao) {
          await carregarInscricoesPendentes(inscricao.esporteId);
        }
      }
      
      return response;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao atualizar status da inscri√ß√£o';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };
  // Cancelar inscri√ß√£o (implemented by changing status to 'rejeitado')
  const cancelarInscricao = async (id: string | number) => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await inscricoesService.atualizarStatus(id.toString(), 'rejeitado');
      
      // Recarregar minhas inscri√ß√µes
      await carregarMinhasInscricoes();
      
      return response;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao cancelar inscri√ß√£o';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Verificar se usu√°rio est√° inscrito em um esporte
  const verificarInscricao = async (esporteId: string | number) => {
    try {
      // Check in local minhasInscricoes instead of API call
      const inscricao = minhasInscricoes.find(i => i.esporteId === esporteId.toString());
      return { inscrito: !!inscricao };
    } catch {
      return { inscrito: false };
    }
  };

  // Verificar status da inscri√ß√£o em um esporte
  const getStatusInscricao = (esporteId: string | number): 'pendente' | 'aceito' | 'rejeitado' | null => {
    const inscricao = minhasInscricoes.find(i => i.esporteId === esporteId);
    return inscricao?.status || null;
  };
  // Carregar minhas inscri√ß√µes no mount
  useEffect(() => {
    // S√≥ carregar se realmente est√° autenticado E tem dados do usu√°rio
    if (isAuthenticated && user?.id) {
      console.log('üöÄ useInscricoes: Iniciando carregamento para usu√°rio autenticado');
      carregarMinhasInscricoes();
    } else {
      console.log('‚è≥ useInscricoes: Aguardando autentica√ß√£o completa');
    }
  }, [isAuthenticated, user?.id, carregarMinhasInscricoes]);

  return {
    minhasInscricoes,
    inscricoesPendentes,
    isLoading,
    error,
    carregarMinhasInscricoes,
    carregarInscricoesPendentes,
    criarInscricao,
    atualizarStatusInscricao,
    cancelarInscricao,
    verificarInscricao,
    getStatusInscricao,
    isAdmin: user?.role === 'admin'
  };
};
